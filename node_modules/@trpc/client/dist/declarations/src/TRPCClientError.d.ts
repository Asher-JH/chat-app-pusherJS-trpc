import { AnyRouter, Maybe, inferRouterError } from '@trpc/server';
import { TRPCErrorResponse } from '@trpc/server/rpc';
export interface TRPCClientErrorLike<TRouter extends AnyRouter> {
    readonly message: string;
    readonly shape: Maybe<inferRouterError<TRouter>>;
    readonly data: Maybe<inferRouterError<TRouter>['data']>;
}
export declare class TRPCClientError<TRouter extends AnyRouter> extends Error implements TRPCClientErrorLike<TRouter> {
    /**
     * @deprecated use `cause`
     */
    readonly originalError: Error | undefined;
    readonly cause: Error | undefined;
    readonly shape: Maybe<inferRouterError<TRouter>>;
    readonly data: Maybe<inferRouterError<TRouter>['data']>;
    /**
     * Fatal error - expect no more results after this error
     * Used for when WebSockets disconnect prematurely.
     */
    readonly isDone: boolean;
    constructor(message: string, opts: {
        result: Maybe<TRPCErrorResponse<inferRouterError<TRouter>>>;
        /**
         * @deprecated use cause
         **/
        originalError?: Error;
        cause?: Error;
        isDone?: boolean;
    });
    static from<TRouter extends AnyRouter>(result: Error | TRPCErrorResponse<any>, opts?: {
        isDone?: boolean;
    }): TRPCClientError<TRouter>;
}
//# sourceMappingURL=TRPCClientError.d.ts.map