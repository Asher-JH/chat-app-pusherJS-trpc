import { CreateTRPCClientOptions, TRPCClient, TRPCClientErrorLike, TRPCRequestOptions } from '@trpc/client';
import type { AnyRouter, ProcedureRecord, inferHandlerInput, inferProcedureInput, inferProcedureOutput } from '@trpc/server';
import { ReactNode } from 'react';
import { DehydratedState, QueryClient, UseInfiniteQueryOptions, UseInfiniteQueryResult, UseMutationOptions, UseMutationResult, UseQueryOptions, UseQueryResult } from 'react-query';
import { SSRState, TRPCContextState } from './internals/context';
export declare type OutputWithCursor<TData, TCursor extends any = any> = {
    cursor: TCursor | null;
    data: TData;
};
export interface TRPCUseQueryBaseOptions extends TRPCRequestOptions {
    /**
     * Opt out of SSR for this query by passing `ssr: false`
     */
    ssr?: boolean;
}
export interface UseTRPCQueryOptions<TPath, TInput, TOutput, TData, TError> extends UseQueryOptions<TOutput, TError, TData, [TPath, TInput]>, TRPCUseQueryBaseOptions {
}
export interface UseTRPCInfiniteQueryOptions<TPath, TInput, TOutput, TError> extends UseInfiniteQueryOptions<TOutput, TError, TOutput, TOutput, [
    TPath,
    TInput
]>, TRPCUseQueryBaseOptions {
}
export interface UseTRPCMutationOptions<TInput, TError, TOutput, TContext = unknown> extends UseMutationOptions<TOutput, TError, TInput, TContext>, TRPCUseQueryBaseOptions {
}
declare type inferInfiniteQueryNames<TObj extends ProcedureRecord<any, any, any, any, any, any>> = {
    [TPath in keyof TObj]: inferProcedureInput<TObj[TPath]> extends {
        cursor?: any;
    } ? TPath : never;
}[keyof TObj];
declare type inferProcedures<TObj extends ProcedureRecord<any, any, any, any, any, any>> = {
    [TPath in keyof TObj]: {
        input: inferProcedureInput<TObj[TPath]>;
        output: inferProcedureOutput<TObj[TPath]>;
    };
};
export declare function createReactQueryHooks<TRouter extends AnyRouter, TSSRContext = unknown>(): {
    Provider: (props: {
        queryClient: QueryClient;
        client: TRPCClient<TRouter>;
        children: ReactNode;
        /**
         * @deprecated
         */
        isPrepass?: boolean | undefined;
        ssrContext?: TSSRContext | null | undefined;
        ssrState?: SSRState | undefined;
    }) => JSX.Element;
    createClient: (opts: CreateTRPCClientOptions<TRouter>) => TRPCClient<TRouter>;
    useContext: () => TRPCContextState<TRouter, TSSRContext>;
    useQuery: <TPath extends keyof TRouter["_def"]["queries"] & string, TQueryFnData = inferProcedures<TRouter["_def"]["queries"]>[TPath]["output"], TData = inferProcedures<TRouter["_def"]["queries"]>[TPath]["output"]>(pathAndInput: [path: TPath, ...args: inferHandlerInput<TRouter["_def"]["queries"][TPath]>], opts?: UseTRPCQueryOptions<TPath, inferProcedures<TRouter["_def"]["queries"]>[TPath]["input"], TQueryFnData, TData, TRPCClientErrorLike<TRouter>> | undefined) => UseQueryResult<TData, TRPCClientErrorLike<TRouter>>;
    useMutation: <TPath_1 extends keyof TRouter["_def"]["mutations"] & string, TContext = unknown>(path: TPath_1 | [TPath_1], opts?: UseTRPCMutationOptions<inferProcedures<TRouter["_def"]["mutations"]>[TPath_1]["input"], TRPCClientErrorLike<TRouter>, inferProcedures<TRouter["_def"]["mutations"]>[TPath_1]["output"], TContext> | undefined) => UseMutationResult<inferProcedures<TRouter["_def"]["mutations"]>[TPath_1]["output"], TRPCClientErrorLike<TRouter>, inferProcedures<TRouter["_def"]["mutations"]>[TPath_1]["input"], TContext>;
    useSubscription: <TPath_2 extends keyof TRouter["_def"]["subscriptions"] & string, TOutput extends ReturnType<import("@trpc/server").ThenArg<ReturnType<TRouter["_def"]["subscriptions"][TPath_2]["call"]>>["output"]>>(pathAndInput: [path: TPath_2, ...args: inferHandlerInput<TRouter["_def"]["subscriptions"][TPath_2]>], opts: {
        enabled?: boolean | undefined;
        onError?: ((err: TRPCClientErrorLike<TRouter>) => void) | undefined;
        onNext: (data: TOutput) => void;
    }) => void;
    useDehydratedState: (client: TRPCClient<TRouter>, trpcState: DehydratedState | undefined) => DehydratedState | undefined;
    useInfiniteQuery: <TPath_3 extends inferInfiniteQueryNames<TRouter["_def"]["queries"]> & string>(pathAndInput: [path: TPath_3, input: Omit<inferProcedures<TRouter["_def"]["queries"]>[TPath_3]["input"], "cursor">], opts?: UseTRPCInfiniteQueryOptions<TPath_3, Omit<inferProcedures<TRouter["_def"]["queries"]>[TPath_3]["input"], "cursor">, inferProcedures<TRouter["_def"]["queries"]>[TPath_3]["output"], TRPCClientErrorLike<TRouter>> | undefined) => UseInfiniteQueryResult<inferProcedures<TRouter["_def"]["queries"]>[TPath_3]["output"], TRPCClientErrorLike<TRouter>>;
};
export {};
//# sourceMappingURL=createReactQueryHooks.d.ts.map