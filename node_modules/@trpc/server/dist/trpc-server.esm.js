export { a as assertNotBrowser, r as resolveHTTPResponse } from './resolveHTTPResponse-fcf14f5a.esm.js';
export { T as TRPCError, c as callProcedure, a as getErrorFromUnknown, g as getMessageFromUnkownError, t as transformTRPCResponse } from './transformTRPCResponse-56464e52.esm.js';
export { L as LegacyRouter, L as Router, r as router } from './router-a3fe3182.esm.js';
export { S as Subscription, s as subscriptionPullFactory } from './subscription-a5c83df4.esm.js';
import { createHTTPServer, createHTTPHandler } from '../adapters/standalone/dist/trpc-server-adapters-standalone.esm.js';
import { n as nodeHTTPRequestHandler } from './nodeHTTPRequestHandler-4e09fc4c.esm.js';
import './codes-5678cc97.esm.js';
import 'events';
import 'http';
import 'url';

// this has been moved to separate package

/**
 * @deprecated use `createHTTPServer` from `@trpc/server/adapters/standalone`
 */
const createHttpServer = createHTTPServer;
/**
 * @deprecated use `createHTTPHandler` from `@trpc/server/adapters/standalone`
 */

const createHttpHandler = createHTTPHandler;
/**
 * @deprecated use `CreateHTTPHandlerOptions` from `@trpc/server/adapters/standalone`
 */

/**
 * @deprecated use `nodeHTTPRequestHandler` from `@trpc/server/adapters/node-http`
 */

const requestHandler = nodeHTTPRequestHandler;
/**
 * @deprecated use `NodeHTTPCreateContextFn` from `@trpc/server/adapters/node-http`
 */

export { createHttpHandler, createHttpServer, requestHandler };
